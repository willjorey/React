{"version":3,"sources":["logo.svg","actions/index.js","firebase/firebase.js","components/login.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DATA_AVAILABLE","LOGOUT","SET_PROFILE","LOGOUT_PROFILE","ADD_SUB","setProfile","pro","dispatch","type","profile","firebase","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setEmail","event","setState","email","target","value","setPass","pass","onLogin","state","auth","signInWithEmailAndPassword","then","user","console","log","catch","error","code","react_default","a","createElement","className","src","logo","alt","id","onChange","onClick","Component","connect","profileReducer","bindActionCreators","Actions","profileState","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","App","es","components_login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ce36154.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const DATA_AVAILABLE = 'DATA_AVAILABLE';\nexport const LOGOUT = 'LOGOUT';\nexport const SET_PROFILE = 'SET_PROFILE';\nexport const LOGOUT_PROFILE = 'LOGOUT_PROFILE';\nexport const ADD_SUB = 'ADD_SUB';\n\n//Import the sample data\n// import Data from '../instructions.json';\n \n// export function getData(){\n//     return (dispatch) => {\n \n//         //Make API Call\n//         //For this example, I will be using the sample data in the json file\n//         //delay the retrieval [Sample reasons only]\n//         setTimeout(() => {\n//             const data  = Data.instructions;\n//             dispatch({type: DATA_AVAILABLE, data:data});\n//         }, 2000);\n \n//     };\n// };\n\nexport function setProfile(pro){\n    return (dispatch) => {\n        dispatch({type: SET_PROFILE, profile: pro});\n    };\n};","import Firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyCbIHF6AK4Kc1HK0Z9wELL7BEI3qst7-bg\",\n    authDomain: \"basketball-9e231.firebaseapp.com\",\n    databaseURL: \"https://basketball-9e231.firebaseio.com\",\n    projectId: \"basketball-9e231\",\n    storageBucket: \"basketball-9e231.appspot.com\",\n    messagingSenderId: \"223402913199\"\n  };\n\nlet app = Firebase.initializeApp(config);\n\n\n  export const firebase = app;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from '../actions'; //Import your actions\nimport '../css/login.css';\nimport {firebase} from '../firebase/firebase';\nimport logo from '../logo.svg';\n\n\nclass Login extends Component {\n    constructor(props){\n        super(props);\n        console.log(this.props);\n        this.state = {\n            email: '',\n            pass: '',\n        }\n    }\n\n    setEmail = (event) =>{\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    setPass = (event) =>{\n        this.setState({\n            pass: event.target.value\n        })\n    };\n    onLogin = () =>{\n        let email = this.state.email;\n        let pass = this.state.pass;\n        firebase.auth().signInWithEmailAndPassword(email, pass).then(function(user){\n            console.log(user.user);\n        }).catch((error) => {\n            if (error.code === 'auth/invalid-email')\n                console.log(error.code)            \n            if(error.code === 'auth/wrong-password')\n                console.log(error.code)\n        });\n    }\n  render() {\n    return (\n      <div className='App'>\n        <div className='form'>\n            <h1>Login</h1>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <form id='login'>\n                <p>Email</p>\n                <input type='text' value={this.state.email} onChange={this.setEmail}/>\n                <br/>\n                <p>Password</p>\n                <input type='text' value={this.state.pass} onChange={this.setPass}/>\n                <br/>\n            </form>\n            <button onClick={this.onLogin}>Login</button>\n\n        </div>\n      </div>\n    );\n  }\n}\n\n// The function takes data from the app current state,\n// and insert/links it into the props of our component.\n// This function makes Redux know that this component needs to be passed a piece of the state\nfunction mapStateToProps(state, props) {\n    return {\n        profile: state.profileReducer.profile,\n    }\n}\n\n// Doing this merges our actions into the componentâ€™s props,\n// while wrapping them in dispatch() so that they immediately dispatch an Action.\n// Just by doing this, we will have access to the actions defined in out actions file (action/Login.js)\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(Actions, dispatch);\n}\n\n//Connect everything\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import { combineReducers } from 'redux';\n \nimport { SET_PROFILE, LOGOUT_PROFILE } from \"../actions/\" //Import the actions types constant we defined in our actions\n\n\nlet profileState = {profile: {email: 'My email'}};\nconst profileReducer = (state = profileState, action) => {\n    switch (action.type) {\n        case SET_PROFILE:\n            state = {...profileState, profile: action.profile};\n            return state;\n        case LOGOUT_PROFILE:\n            state = {...profileState.profile};\n            return state;\n        default:\n            return state;\n    }\n}\n\n// Combine all the reducers\nconst rootReducer = combineReducers({\n    profileReducer\n    // ,[ANOTHER REDUCER], [ANOTHER REDUCER] ....\n})\n \nexport default rootReducer;","import React, { Component } from 'react';\n\nimport Login from './components/login'\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Login/>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}